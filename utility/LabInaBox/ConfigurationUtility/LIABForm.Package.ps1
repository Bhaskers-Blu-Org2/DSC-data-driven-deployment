#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 9d2ecf58-2cc3-4f44-8af1-83fc78286f2f
# Source File: D:\Git\DSC-data-driven-deployment\utility\LabInaBox\ConfigurationUtility\LIABForm.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
9z+jop6mZ2MAAA==#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.138
     Generated on:       4/18/2017 10:49 AM
     Generated by:       troyault
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2017
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-LIABForm_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formLabInABoxConfigurato = New-Object 'System.Windows.Forms.Form'
	$cb_AzureAutomation = New-Object 'System.Windows.Forms.CheckBox'
	$labelOnlyOneNatSwitchCanE = New-Object 'System.Windows.Forms.Label'
	$SwitchType = New-Object 'System.Windows.Forms.Label'
	$cb_SwitchType = New-Object 'System.Windows.Forms.ComboBox'
	$labelISOsWillBeMountedToD = New-Object 'System.Windows.Forms.Label'
	$cb_DevMachine = New-Object 'System.Windows.Forms.CheckBox'
	$labelWindows2016ISO = New-Object 'System.Windows.Forms.Label'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$cb_Windows2016ISO = New-Object 'System.Windows.Forms.ComboBox'
	$buttonFinish = New-Object 'System.Windows.Forms.Button'
	$labelServers = New-Object 'System.Windows.Forms.Label'
	$cb_ConfigtoApply = New-Object 'System.Windows.Forms.ComboBox'
	$labelParentDiskDrive = New-Object 'System.Windows.Forms.Label'
	$tb_SQLServerFeatures = New-Object 'System.Windows.Forms.TextBox'
	$cb_ParentDiskDrive = New-Object 'System.Windows.Forms.ComboBox'
	$labelConfigToApply = New-Object 'System.Windows.Forms.Label'
	$cb_ResourceDiskDrive = New-Object 'System.Windows.Forms.ComboBox'
	$labelResourceLocationDrive = New-Object 'System.Windows.Forms.Label'
	$tb_ServerstoConfig = New-Object 'System.Windows.Forms.TextBox'
	$cb_ChildDiskDrive = New-Object 'System.Windows.Forms.ComboBox'
	$lb_ChildDiskDrive = New-Object 'System.Windows.Forms.Label'
	$labelSQLServerFeatures = New-Object 'System.Windows.Forms.Label'
	$tb_LabMachinePrefix = New-Object 'System.Windows.Forms.TextBox'
	$cb_SQLServerISO = New-Object 'System.Windows.Forms.ComboBox'
	$lb_DCMachineName = New-Object 'System.Windows.Forms.Label'
	$cb_DSCCentralHub = New-Object 'System.Windows.Forms.CheckBox'
	$labelLocalAdminPass = New-Object 'System.Windows.Forms.Label'
	$cb_SSMSISO = New-Object 'System.Windows.Forms.ComboBox'
	$tb_LocalAdminPass = New-Object 'System.Windows.Forms.TextBox'
	$labelDomainAdminPass = New-Object 'System.Windows.Forms.Label'
	$tb_DomainAdminPass = New-Object 'System.Windows.Forms.TextBox'
	$labelSQLServerISO = New-Object 'System.Windows.Forms.Label'
	$labelSysPrepDriveName = New-Object 'System.Windows.Forms.Label'
	$labelSSMSISO = New-Object 'System.Windows.Forms.Label'
	$tb_SysPrepDriveName = New-Object 'System.Windows.Forms.TextBox'
	$labelNetworkIpRange = New-Object 'System.Windows.Forms.Label'
	$labelSwitchName = New-Object 'System.Windows.Forms.Label'
	$tb_NetworkIpRange = New-Object 'System.Windows.Forms.TextBox'
	$tb_SwitchName = New-Object 'System.Windows.Forms.TextBox'
	$fileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$openToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$exitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$openfiledialog = New-Object 'System.Windows.Forms.OpenFileDialog'
	$errorprovider1 = New-Object 'System.Windows.Forms.ErrorProvider'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	#region Validation Functions
	function Validate-IsIP ([string]$IP)
	{
		return $IP -match "\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\." +`
		"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\." +`
		"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\." +`
		"x\b"
	}
	function Validate-IsEmptyTrim ([string]$Text)
	{
		if ($text -eq $null -or $text.Trim().Length -eq 0)
		{
			return $true
		}
		
		return $false
	}
	function Validate-IsEmpty ([string]$Text)
	{
		return [string]::IsNullOrEmpty($Text)
	}
	function Validate-ValidString
	{
		param
		(
			[parameter(Mandatory = $true)]
			#[ValidateNotNullOrEmpty]
			[string[]]
			$Item
		)
		Process{RETURN $true}
	}
	
	#endregion
	#region Form Load
	$formLabInABoxConfigurato_Load= {
		$Drives = $(Get-PSDrive | Where-Object { $_.Provider.Name -eq "FileSystem" }).Name
		foreach ($drive in $drives)
		{
			Update-ComboBox $cb_ParentDiskDrive $Drive -Append
			Update-ComboBox $cb_ResourceDiskDrive $drive -Append
			Update-ComboBox $cb_ChildDiskDrive $drive -Append
		}
		
		Update-ComboBox $cb_SwitchType 'Private' -Append
		Update-ComboBox $cb_SwitchType 'NAT' -Append
	}
	#endregion
	#region Control Helper Functions
	function Show-Msbox
	{
		param ([string]$message,
			[string]$button = "okonly",
			[string]$icon = "information",
			[string]$title = "Message Box"
			
		)
		[reflection.assembly]::loadwithpartialname("microsoft.visualbasic") | Out-Null
		[microsoft.visualbasic.interaction]::Msgbox($message, "$button,$icon", $title)
	}
	function Show-NotifyIcon
	{
	<#
		.SYNOPSIS
			Displays a NotifyIcon's balloon tip message in the taskbar's notification area.
		
		.DESCRIPTION
			Displays a NotifyIcon's a balloon tip message in the taskbar's notification area.
			
		.PARAMETER NotifyIcon
	     	The NotifyIcon control that will be displayed.
		
		.PARAMETER BalloonTipText
	     	Sets the text to display in the balloon tip.
		
		.PARAMETER BalloonTipTitle
			Sets the Title to display in the balloon tip.
		
		.PARAMETER BalloonTipIcon	
			The icon to display in the ballon tip.
		
		.PARAMETER Timeout	
			The time the ToolTip Balloon will remain visible in milliseconds. 
			Default: 0 - Uses windows default.
	#>
		 param(
		  [Parameter(Mandatory = $true, Position = 0)]
		  [ValidateNotNull()]
		  [System.Windows.Forms.NotifyIcon]$NotifyIcon,
		  [Parameter(Mandatory = $true, Position = 1)]
		  [ValidateNotNullOrEmpty()]
		  [String]$BalloonTipText,
		  [Parameter(Position = 2)]
		  [String]$BalloonTipTitle = '',
		  [Parameter(Position = 3)]
		  [System.Windows.Forms.ToolTipIcon]$BalloonTipIcon = 'None',
		  [Parameter(Position = 4)]
		  [int]$Timeout = 0
	 	)
		
		if($null -eq $NotifyIcon.Icon)
		{
			#Set a Default Icon otherwise the balloon will not show
			$NotifyIcon.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon([System.Windows.Forms.Application]::ExecutablePath)
		}
		
		$NotifyIcon.ShowBalloonTip($Timeout, $BalloonTipTitle, $BalloonTipText, $BalloonTipIcon)
	}
	
	
	
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	#region Form Clicks
	$cb_DSCCentralHub_CheckedChanged={
		if ($tb_SQLServerFeatures.Enabled -eq $false)
		{
			$DSCCentralNewVal = $true
			$tb_SQLServerFeatures.Text = "SQLENGINE,IS"		
		}
		else
		{
			$DSCCentralNewVal = $false
			#$tb_ServerstoConfig.Text = ""
			$tb_SQLServerFeatures.Text = ""
			$cb_ConfigtoApply.ResetText()
			
		}
		
		$labelSQLServerFeatures.Enabled = $DSCCentralNewVal
		$tb_SQLServerFeatures.Enabled = $DSCCentralNewVal
		#$tb_ServerstoConfig.Enabled = $DSCCentralNewVal
		#$labelServers.Enabled = $DSCCentralNewVal
		$cb_ConfigtoApply.Enabled = $DSCCentralNewVal
		$labelConfigToApply.Enabled = $DSCCentralNewVal
	}
	$buttonFinish_Click = {
		
		$Network = $tb_NetworkIpRange.Text.Substring(0, $($tb_NetworkIpRange.Text.Length - 2))
		
		if ($cb_SwitchType.SelectedItem -eq 'NAT')
		{
			$myDomainIp = "$Network.2"
			$myRouterIp = "$Network.1"
			$myDNSIp = "$Network.2"
		}
		else
		{
			$myDomainIp = "$Network.1"
			$myRouterIp = "$Network.1"
			$myDNSIp = "$Network.1"
		}
		$myGateway = "$Network.1"
		[array]$Servers =$($tb_ServerstoConfig.Text).split(",") 
		$liabConfig = [PsCustomobject]@{
			'Scriptlocation' = "$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\Scripts";
			'DSCResourceDest' = 'C:\Program Files\WindowsPowerShell\Modules';
			'DSCResourceSource' = "$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\DSCResources";
			'ParentFolderPath' = "$($cb_ParentDiskDrive.SelectedItem):\LabinaBox\ParentVMDisks";
			'ParentFolderPathSource' = "$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\ParentVMDisks";
			'ChildFolderPath' = "$($cb_ChildDiskDrive.SelectedItem):\Labinabox\ChildVMDisks\$($tb_LabMachinePrefix.Text)";
			'ISOFolderPath' = "$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\ISO";
			'DomainJoinPath' = "$($cb_ChildDiskDrive.SelectedItem):\LabinaBox\ChildVMDisks\$($tb_LabMachinePrefix.Text)\DomainJoin";
			'DCMachineName' = "$($tb_LabMachinePrefix.Text)-DC";
			'localAdminPass' = $tb_LocalAdminPass.Text;
			'domainAdminPass' = $tb_DomainAdminPass.Text;
			'sysPrepDriveName' = $tb_SysPrepDriveName.Text;
			'DCsysPrepDriveName' = $tb_SysPrepDriveName.Text;
			'SwitchName' = $tb_SwitchName.Text;
			'SwitchType' = $cb_SwitchType.SelectedItem;
			'NetworkIPRange' = $tb_NetworkIpRange.Text;
			'DomainName' = $tb_LabMachinePrefix.Text;
			'DomainExtention' = '.com';
			'domainIpAddress' = $myDomainIp;
			'routerIpAddress' = $myRouterIp;
			'DCGateway' = $myGateway;
			'DNSIp' = $myDNSIp;
			'DHCPScopeIpStart' = $($tb_NetworkIpRange.Text).Substring(0, $($tb_NetworkIpRange.Text).LastIndexOf('.'))+".20";
			'DHCPScopeIpEnd' = $($tb_NetworkIpRange.Text).Substring(0, $($tb_NetworkIpRange.Text).LastIndexOf('.')) + ".200";
		}
		if ($cb_DevMachine.Checked)
		{
			Add-Member -InputObject $liabConfig -MemberType NoteProperty -Name 'DeveloperMachine' -Value "$($tb_LabMachinePrefix.Text)-Dev";
		}
		$LabServers = @()
		foreach ($Server in $servers)
		{	$LabServers += $($tb_LabMachinePrefix.Text) + "-" + $Server
		}
		$ServersAddtoDomain = $LabServers
		$PSMainscript = "Import-module -name `"$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\modules\LabinaBox.psm1`"`r"
		$PSCreatescript = $PSMainscript + "New-LabinaBox -configuration `"$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Config.json`" `r"
		$PSStopScript = $PSMainscript + "Stop-LabinaBox -configuration `"$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Config.json`" `r"
		$PSStartScript = $PSMainscript + "Start-LabinaBox -configuration `"$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Config.json`" `r"
		$PSUpdateScript = $PSMainscript + "Update-LabinaBox -configuration `"$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Config.json`" `r"
		$PSRemoveScript = $PSMainscript + "Remove-LabinaBox -configuration `"$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Config.json`" `r"
		$PSCheckPointScript = $PSMainscript + "CheckPoint-LabinaBox -configuration `"$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Config.json`" `r"
		$PSRemoveCheckPointScript = $PSMainscript + "Remove-LabinaBoxSnapshot -configuration `"$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Config.json`" `r"
		
		if ($cb_Windows2016ISO.SelectedItem)
		{
			Add-Member -InputObject $liabConfig -MemberType NoteProperty -Name 'Windows2016ISO' -Value $cb_Windows2016ISO.SelectedItem;
		}
		if ($cb_SQLServerISO.SelectedItem)
		{
			Add-Member -InputObject $liabConfig -MemberType NoteProperty -Name 'SQLServerISO' -Value $cb_SQLServerISO.SelectedItem;
		}
		if ($cb_SSMSISO.SelectedItem)
		{
			Add-Member -InputObject $liabConfig -MemberType NoteProperty -Name 'SSMSISO' -Value $cb_SSMSISO.SelectedItem;
		}
		if ($cb_DSCCentralHub.Checked)
		{
			Add-Member -InputObject $liabConfig -MemberType NoteProperty -Name 'ServertoQueue' -Value $LabServers;
			Add-Member -InputObject $liabConfig -MemberType NoteProperty -Name 'ServerConfig' -Value $cb_ConfigtoApply.SelectedItem;
	
			$PSCreatescript = $PSCreatescript + "New-DSCDataDrivenSQL -configuration `"$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Config.json`" -SQLConfiguration `"$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_SQLConfig.json`" -verbose `r"
			$PSCreatescript = $PSCreatescript + "Add-ServerConfigtoQueue -configuration `"$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Config.json`" -SQLConfiguration `"$($cb_ResourceDiskDrive.SelectedItem):\LabinaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_SQLConfig.json`" -verbose"
			$ServersAddtoDomain= $ServersAddtoDomain +  "$($tb_LabMachinePrefix.Text)-DSC"
			
			$sqlConfig = [PsCustomobject]@{
				'DSCDataDrivenSQLServer' = "$($tb_LabMachinePrefix.Text)-DSC";
				'SQLServerBitsLocation' = "\\$($tb_LabMachinePrefix.Text)-DC\";
				'SQLAdminAccount' = "$($tb_LabMachinePrefix.Text)\Administrator";
				'WindowsBitsLocation' = "\\$($tb_LabMachinePrefix.Text)-DC\Windows2016ISO\Sources\sxs";
				'OutputPath' = 'C:\DSC_Mof';
				'DefaultSQLConfigurationName' = 'SQLStandAloneNode';
				'StandaloneParentConfigurationName' ='SQLStandAlone';
				'PSDscAllowDomainUser' = '$true';
				'PSDscAllowPlainTextPassword' = '$true';
				'SQLInstanceName' = 'MSSQLSERVER';
				'SQLInstallShareDir' = 'C:\Program Files\Microsoft SQL Server';
				'SQLUserDBDir' = 'C:\Program Files\Microsoft SQL Server';
				'SQLTempDBLogDir' = 'C:\Program Files\Microsoft SQL Server';
				'SQLTempDBDir' = 'C:\Program Files\Microsoft SQL Server';
				'InstallSQLDataDir' = 'C:\Program Files\Microsoft SQL Server';
				'SQLUserDBLogDir' = 'C:\Program Files\Microsoft SQL Server';
				'InstallSharedWOWDir' = 'C:\Program Files (x86)\Microsoft SQL Server'
				'Features' = "$($tb_SQLServerFeatures.Text)";
				'SQLBackupDir' = 'C:\Program Files\Microsoft SQL Server\Backup';
				'InstanceDir' = 'C:\Program Files\Microsoft SQL Server';
				'DMaxDop' = '$true';
				'DMemory' = '$true';
				'NodetoConfigure' = '$env:computername';
			}
			If (!(Test-Path -Path "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\LabConfig\$($tb_LabMachinePrefix.Text)"))
			{ New-Item -ItemType Directory -Path "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\LabConfig\$($tb_LabMachinePrefix.Text)"}
			
			ConvertTo-Json -InputObject $sqlConfig | Out-File -FilePath "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_SQLConfig.json"
			
		}
		if ($cb_DevMachine.Checked -eq $true)
		{
			$ServersAddtoDomain = $ServersAddtoDomain + "$($tb_LabMachinePrefix.Text)-Dev"
		}
		Add-Member -InputObject $liabConfig -MemberType NoteProperty -Name 'DomainJoinServer' -Value $ServersAddtoDomain;
	    $BailTest = !$formLabInABoxConfigurato.ValidateChildren()
		#$_.Cancel = !$formLabInABoxConfigurato.ValidateChildren()
		IF ($BailTest )
		{
			Show-Msbox -message "Validation Error Please fix." -icon "Critical"
		}
		else
		{
			New-Item -ItemType Directory -Force -Path "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\LabConfig\$($tb_LabMachinePrefix.Text)"
			ConvertTo-Json -InputObject $liabConfig | Out-File -FilePath "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Config.json"
			$PSCreatescript | Out-File -FilePath "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Create.ps1"
			$PSUpdatescript | Out-File -FilePath "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Update.ps1"
			$PSStartScript | Out-File -FilePath "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Start.ps1"
			$PSStopScript | Out-File -FilePath "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Stop.ps1"
			$PSRemoveScript | Out-File -FilePath "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_Remove.ps1"
			$PSCheckPointScript | Out-File -FilePath "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_CheckPoint.ps1"
			$PSRemoveCheckPointScript | Out-File -FilePath "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\LabConfig\$($tb_LabMachinePrefix.Text)\$($tb_LabMachinePrefix.Text)_RemoveCheckPoint.ps1"
			
			if ($($openfiledialog.FileNames[0]) -eq "openfiledialog1") { $FinishText = "New Configuration Created" }
			else { $FinishText = "Configuration Updated" }
			$rc = Show-Msbox -message $FinishText
		}
		
		explorer "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\LabConfig\$($tb_LabMachinePrefix.Text)\"
		$formLabInABoxConfigurato.Close()
	}
	$exitToolStripMenuItem_Click={
		$formLabInABoxConfigurato.Close()
	}
	$openToolStripMenuItem_Click = {
	
		$openfiledialog.Multiselect
		$openfiledialog.ShowDialog()
		$openfiledialog.FileNames
		foreach ($file in $openfiledialog.FileNames)
		{
			if ($file.Contains("_SQLConfig"))
			{
				$MySQLConfig = Get-Content $file | ConvertFrom-Json
			}
			elseif ($file.Contains("_Config"))
			{
				$MyMainConfig = Get-Content $file | ConvertFrom-Json
			}
		}
		$cb_ResourceDiskDrive.SelectedItem = $($MyMainConfig.DSCResourceSource).SubString(0, 1)
		$cb_ParentDiskDrive.SelectedItem = $($MyMainConfig.ParentFolderPath).SubString(0, 1)
		$cb_ChildDiskDrive.SelectedItem = $($MyMainConfig.ChildFolderPath).SubString(0, 1)
		$tb_LabMachinePrefix.Text = $MyMainConfig.DomainName
		$tb_LocalAdminPass.Text = $MyMainConfig.LocalAdminPass
		$tb_DomainAdminPass.Text = $MyMainConfig.DomainAdminPass
		$tb_SysPrepDriveName.Text = $MyMainConfig.SysPrepDriveName
		$cb_SwitchType.SelectedItem = $MyMainConfig.SwitchType
		$tb_NetworkIpRange.Text = $MyMainConfig.NetworkIPRange
		$tb_SwitchName.Text = $MyMainConfig.SwitchName
		
		if ($MyMainConfig.SSMSISO)
		{
			$cb_SSMSISO.SelectedItem = $MyMainConfig.SSMSISO
		}
		if ($MyMainConfig.DeveloperMachine)
		{
			$cb_DevMachine.Checked = $true
		}
		if ($MyMainConfig.ServerConfig)
		{
			$cb_DSCCentralHub.Checked = $true
			$tb_SQLServerFeatures.Text = $MySQLConfig.Features
		}
		
		if ($MyMainConfig.SQLServerISO)
		{
			
			$cb_SQLServerISO.SelectedItem = $MyMainConfig.SQLServerISO
		}
		
		if ($MyMainConfig.Windows2016ISO)
		{
			$cb_Windows2016ISO.SelectedItem = $MyMainConfig.Windows2016ISO
		}
		
		$ServersToLoop =@()
		$ServersToLoop = $MyMainConfig.ServerToQueue
		if (!$ServersToLoop)
		{
			$ServersToLoop = $MyMainConfig.DomainJoinServer
		}
		foreach ($server in $ServersToLoop)
		{
			if ($ServersToLoop[0] -eq $server)
			{ $tb_ServerstoConfig.Text = $tb_ServerstoConfig.Text + $Server.Split("-", 2)[1] }
			else { $tb_ServerstoConfig.Text = $tb_ServerstoConfig.Text + ',' + $Server.Split("-", 2)[1] }
		}
		$cb_ConfigtoApply.SelectedItem = $MyMainConfig.ServerConfig
	}
	$cb_SwitchType_SelectedIndexChanged = {
		if ($cb_SwitchType.SelectedItem -eq 'NAT')
		{
			$NatNet = $(get-netnat).InternalIPInterfaceAddressPrefix
			if ($NatNet)
			{
				$NatIp = "$($NatNet.Substring(0, $($NatNet.Length - 5))).1"
			}
			if ($NatIp)
			{
				$Natinterface = $(Get-NetIPAddress -IPAddress $NatIp).InterfaceAlias
			}
			
			$mySwitchName = $($Natinterface.Split("(")[1]).substring(0, $($($Natinterface.Split("(")[1]).length - 1))
			if ($NatNet -and $mySwitchName)
			{
				$tb_SwitchName.Text = $mySwitchName
				$newNetworkIPRange = "$($($mySwitchName.Substring(4, $($mySwitchName.Length-6)))).x"
				$tb_NetworkIpRange.Text = $newNetworkIPRange
			}
			else
			{
				$tb_SwitchName.Enabled = $true
				$tb_NetworkIpRange.Enabled = $true
			}
			
		}
		if ($cb_SwitchType.SelectedItem -eq 'Private')
		{
			$tb_SwitchName.Enabled = $true
			$tb_NetworkIpRange.Enabled = $true
		}
	}
	$cb_ResourceDiskDrive_SelectedIndexChanged = {
		#TODO: Place custom script here
		$ISOFiles = $(get-childitem "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\ISO\").Name
		foreach ($ISO in $ISOFiles)
		{
			Update-ComboBox $cb_SQLServerISO $ISO -Append
			Update-ComboBox $cb_Windows2016ISO $ISO -Append
		}
		Update-ComboBox $cb_ConfigtoApply "SQLStandAlone" -Append
		$ISOFiles = $(get-childitem "$($cb_ResourceDiskDrive.SelectedItem):\LabInaBox\ISO\").Name
		foreach ($ISO in $ISOFiles)
		{
			Update-ComboBox $cb_SSMSISO $ISO -Append
		}
	}
	$cb_AzureAutomation_CheckedChanged = {
		#TODO: Place custom script here
		
	}
	#endregion
	#region Form Validation
	$tb_LabMachinePrefix_Validating=[System.ComponentModel.CancelEventHandler]{
		#Check if the Name field is empty
		$_.Cancel = Validate-IsEmpty  $tb_LabMachinePrefix.Text.ToString()
		if ($_.Cancel)
		{
			#Display an error message
			$errorprovider1.SetError($tb_LabMachinePrefix, "Please enter a valid lab prefix.");	
		}
	}
	$tb_LabMachinePrefix_Validated={
		#TODO: Place custom script here
		$errorprovider1.SetError($this, "");
	}
	$tb_LocalAdminPass_Validating=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$_.Cancel = Validate-IsEmpty  $tb_LocalAdminPass.Text.ToString()
		if ($_.Cancel)
		{
			#Display an error message
			$errorprovider1.SetError($tb_LocalAdminPass, "Please enter a valid password.");
		}
		
	}
	$tb_LocalAdminPass_Validated={
		$errorprovider1.SetError($this, "");
		
	}
	$tb_DomainAdminPass_Validating=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$_.Cancel = Validate-IsEmpty  $tb_DomainAdminPass.Text.ToString()
		if ($_.Cancel)
		{
			#Display an error message
			$errorprovider1.SetError($tb_DomainAdminPass, "Please enter a valid password.");
		}
		
	}
	$tb_DomainAdminPass_Validated={
		$errorprovider1.SetError($this, "");
		
	}
	$tb_SysPrepDriveName_Validating=[System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$SysPrepDrive = $tb_SysPrepDriveName.Text.ToString()
		$_.Cancel = (Validate-IsEmpty $SysPrepDrive) -or $($SysPrepDrive.Split(".",2))[1] -ne "vhdx"
		if ($_.Cancel)
		{
			#Display an error message
			$errorprovider1.SetError($tb_SysPrepDriveName, "Please enter a valid sysPrepDrive. (Must end in vhdx)");
		}
		
	}
	$tb_SysPrepDriveName_Validated={
		$errorprovider1.SetError($this, "");
		
	}
	$tb_SwitchName_Validating=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$_.Cancel = Validate-IsEmpty  $tb_SwitchName.Text.ToString()
		if ($_.Cancel)
		{
			#Display an error message
			$errorprovider1.SetError($tb_SwitchName, "Please enter a valid Switch.");
		}
		
	}
	$tb_SwitchName_Validated={
		$errorprovider1.SetError($this, "");
		
	}
	$tb_NetworkIpRange_Validating=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$_.Cancel = !(Validate-IsIP  $tb_NetworkIpRange.Text.ToString())
		if ($_.Cancel)
		{
			#Display an error message
			$errorprovider1.SetError($tb_NetworkIpRange, "Please enter a valid Ip.");
		}
		
	}
	$tb_NetworkIpRange_Validated={
		$errorprovider1.SetError($this, "");
		
	}
	$cb_ResourceDiskDrive_Validating=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$_.Cancel = $cb_ResourceDiskDrive.SelectedIndex -eq -1
		if ($_.Cancel)
		{
			#Display an error message
			$errorprovider1.SetError($cb_ResourceDiskDrive, "Please select a valid Resource Drive");
		}
		
	}
	$cb_ResourceDiskDrive_Validated={
		#TODO: Place custom script here
		$errorprovider1.SetError($this, "");
	}
	$cb_ParentDiskDrive_Validating=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$_.Cancel = $cb_ParentDiskDrive.SelectedIndex -eq -1
		if ($_.Cancel)
		{
			#Display an error message
			$errorprovider1.SetError($cb_ParentDiskDrive, "Please select a valid Parent Drive");
		}
		
	}
	$cb_ParentDiskDrive_Validated={
		$errorprovider1.SetError($this, "");
		
	}
	$cb_ChildDiskDrive_Validating=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$_.Cancel = $cb_ChildDiskDrive.SelectedIndex -eq -1
		if ($_.Cancel)
		{
			#Display an error message
			$errorprovider1.SetError($cb_ChildDiskDrive, "Please select a valid Child Drive");
		}
		
	}
	$cb_ChildDiskDrive_Validated={
		$errorprovider1.SetError($this, "");
		
	}
	$cb_SSMSISO_Validating=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#$_.Cancel = ($cb_SSMSISO.SelectedIndex -eq -1) -and ($cb_SSMSISO.Enabled)
		#if ($_.Cancel)
		#{
		#	#Display an error message
		#	$errorprovider1.SetError($cb_SSMSISO, "Please select a ISO");
		#}
	}
	$cb_SSMSISO_Validated={
		#$errorprovider1.SetError($this, "");
		
	}
	$cb_SQLServerISO_Validating=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#	$_.Cancel = ($cb_SQLServerISO.SelectedIndex -eq -1) -and ($cb_SQLServerISO.Enabled)
	#	if ($_.Cancel)
	#	{
	#		#Display an error message
	#		$errorprovider1.SetError($cb_SQLServerISO, "Please select a ISO");
	#	}
		
	}
	$cb_SQLServerISO_Validated={
	#	$errorprovider1.SetError($this, "");
		
	}
	$cb_Windows2016ISO_Validating=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#	$_.Cancel = ($cb_Windows2016ISO.SelectedIndex -eq -1) -and ($cb_Windows2016ISO.Enabled)
	#	if ($_.Cancel)
	#	{
	#		#Display an error message
	#		$errorprovider1.SetError($cb_Windows2016ISO, "Please select a ISO");
	#	}
		
	}
	$cb_Windows2016ISO_Validated={
	#	$errorprovider1.SetError($this, "");
		
	}
	$cb_ConfigtoApply_Validating=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$_.Cancel = ($cb_ConfigtoApply.SelectedIndex -eq -1) -and ($cb_ConfigtoApply.Enabled)
		if ($_.Cancel)
		{
			#Display an error message
			$errorprovider1.SetError($cb_ConfigtoApply, "Please select a Configuration to Apply");
		}
		
	}
	$cb_ConfigtoApply_Validated={
		$errorprovider1.SetError($this, "");
		
	}
	$tb_SQLServerFeatures_Validating=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$_.Cancel = (Validate-IsEmpty  $tb_SQLServerFeatures.Text.ToString()) -and ($tb_SQLServerFeatures.Enabled)
		if ($_.Cancel)
		{
			#Display an error message
			$errorprovider1.SetError($tb_SQLServerFeatures, "Please enter valid SQL Server Features");
		}
		
	}
	$tb_SQLServerFeatures_Validated={
		$errorprovider1.SetError($this, "");
		
	}
	$tb_ServerstoConfig_Validating=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$_.Cancel = (Validate-IsEmpty  $tb_ServerstoConfig.Text.ToString()) -and ($tb_ServerstoConfig.Enabled)
		if ($_.Cancel)
		{
			#Display an error message
			$errorprovider1.SetError($tb_ServerstoConfig, "Please enter Servers to config");
		}
		
	}
	$tb_ServerstoConfig_Validated={
		$errorprovider1.SetError($this, "");
		
	}
	#endregion
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formLabInABoxConfigurato.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$cb_AzureAutomation.remove_CheckedChanged($cb_AzureAutomation_CheckedChanged)
			$cb_SwitchType.remove_SelectedIndexChanged($cb_SwitchType_SelectedIndexChanged)
			$cb_Windows2016ISO.remove_Validating($cb_Windows2016ISO_Validating)
			$cb_Windows2016ISO.remove_Validated($cb_Windows2016ISO_Validated)
			$buttonFinish.remove_Click($buttonFinish_Click)
			$cb_ConfigtoApply.remove_Validating($cb_ConfigtoApply_Validating)
			$cb_ConfigtoApply.remove_Validated($cb_ConfigtoApply_Validated)
			$tb_SQLServerFeatures.remove_Validating($tb_SQLServerFeatures_Validating)
			$tb_SQLServerFeatures.remove_Validated($tb_SQLServerFeatures_Validated)
			$cb_ParentDiskDrive.remove_Validating($cb_ParentDiskDrive_Validating)
			$cb_ParentDiskDrive.remove_Validated($cb_ParentDiskDrive_Validated)
			$cb_ResourceDiskDrive.remove_SelectedIndexChanged($cb_ResourceDiskDrive_SelectedIndexChanged)
			$cb_ResourceDiskDrive.remove_Validating($cb_ResourceDiskDrive_Validating)
			$cb_ResourceDiskDrive.remove_Validated($cb_ResourceDiskDrive_Validated)
			$tb_ServerstoConfig.remove_Validating($tb_ServerstoConfig_Validating)
			$tb_ServerstoConfig.remove_Validated($tb_ServerstoConfig_Validated)
			$cb_ChildDiskDrive.remove_Validating($cb_ChildDiskDrive_Validating)
			$cb_ChildDiskDrive.remove_Validated($cb_ChildDiskDrive_Validated)
			$tb_LabMachinePrefix.remove_Validating($tb_LabMachinePrefix_Validating)
			$tb_LabMachinePrefix.remove_Validated($tb_LabMachinePrefix_Validated)
			$cb_SQLServerISO.remove_Validating($cb_SQLServerISO_Validating)
			$cb_SQLServerISO.remove_Validated($cb_SQLServerISO_Validated)
			$cb_DSCCentralHub.remove_CheckedChanged($cb_DSCCentralHub_CheckedChanged)
			$cb_SSMSISO.remove_Validating($cb_SSMSISO_Validating)
			$cb_SSMSISO.remove_Validated($cb_SSMSISO_Validated)
			$tb_LocalAdminPass.remove_Validating($tb_LocalAdminPass_Validating)
			$tb_LocalAdminPass.remove_Validated($tb_LocalAdminPass_Validated)
			$tb_DomainAdminPass.remove_Validating($tb_DomainAdminPass_Validating)
			$tb_DomainAdminPass.remove_Validated($tb_DomainAdminPass_Validated)
			$tb_SysPrepDriveName.remove_Validating($tb_SysPrepDriveName_Validating)
			$tb_SysPrepDriveName.remove_Validated($tb_SysPrepDriveName_Validated)
			$tb_NetworkIpRange.remove_Validating($tb_NetworkIpRange_Validating)
			$tb_NetworkIpRange.remove_Validated($tb_NetworkIpRange_Validated)
			$tb_SwitchName.remove_Validating($tb_SwitchName_Validating)
			$tb_SwitchName.remove_Validated($tb_SwitchName_Validated)
			$formLabInABoxConfigurato.remove_Load($formLabInABoxConfigurato_Load)
			$openToolStripMenuItem.remove_Click($openToolStripMenuItem_Click)
			$exitToolStripMenuItem.remove_Click($exitToolStripMenuItem_Click)
			$formLabInABoxConfigurato.remove_Load($Form_StateCorrection_Load)
			$formLabInABoxConfigurato.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formLabInABoxConfigurato.SuspendLayout()
	$menustrip1.SuspendLayout()
	#
	# formLabInABoxConfigurato
	#
	$formLabInABoxConfigurato.Controls.Add($cb_AzureAutomation)
	$formLabInABoxConfigurato.Controls.Add($labelOnlyOneNatSwitchCanE)
	$formLabInABoxConfigurato.Controls.Add($SwitchType)
	$formLabInABoxConfigurato.Controls.Add($cb_SwitchType)
	$formLabInABoxConfigurato.Controls.Add($labelISOsWillBeMountedToD)
	$formLabInABoxConfigurato.Controls.Add($cb_DevMachine)
	$formLabInABoxConfigurato.Controls.Add($labelWindows2016ISO)
	$formLabInABoxConfigurato.Controls.Add($menustrip1)
	$formLabInABoxConfigurato.Controls.Add($cb_Windows2016ISO)
	$formLabInABoxConfigurato.Controls.Add($buttonFinish)
	$formLabInABoxConfigurato.Controls.Add($labelServers)
	$formLabInABoxConfigurato.Controls.Add($cb_ConfigtoApply)
	$formLabInABoxConfigurato.Controls.Add($labelParentDiskDrive)
	$formLabInABoxConfigurato.Controls.Add($tb_SQLServerFeatures)
	$formLabInABoxConfigurato.Controls.Add($cb_ParentDiskDrive)
	$formLabInABoxConfigurato.Controls.Add($labelConfigToApply)
	$formLabInABoxConfigurato.Controls.Add($cb_ResourceDiskDrive)
	$formLabInABoxConfigurato.Controls.Add($labelResourceLocationDrive)
	$formLabInABoxConfigurato.Controls.Add($tb_ServerstoConfig)
	$formLabInABoxConfigurato.Controls.Add($cb_ChildDiskDrive)
	$formLabInABoxConfigurato.Controls.Add($lb_ChildDiskDrive)
	$formLabInABoxConfigurato.Controls.Add($labelSQLServerFeatures)
	$formLabInABoxConfigurato.Controls.Add($tb_LabMachinePrefix)
	$formLabInABoxConfigurato.Controls.Add($cb_SQLServerISO)
	$formLabInABoxConfigurato.Controls.Add($lb_DCMachineName)
	$formLabInABoxConfigurato.Controls.Add($cb_DSCCentralHub)
	$formLabInABoxConfigurato.Controls.Add($labelLocalAdminPass)
	$formLabInABoxConfigurato.Controls.Add($cb_SSMSISO)
	$formLabInABoxConfigurato.Controls.Add($tb_LocalAdminPass)
	$formLabInABoxConfigurato.Controls.Add($labelDomainAdminPass)
	$formLabInABoxConfigurato.Controls.Add($tb_DomainAdminPass)
	$formLabInABoxConfigurato.Controls.Add($labelSQLServerISO)
	$formLabInABoxConfigurato.Controls.Add($labelSysPrepDriveName)
	$formLabInABoxConfigurato.Controls.Add($labelSSMSISO)
	$formLabInABoxConfigurato.Controls.Add($tb_SysPrepDriveName)
	$formLabInABoxConfigurato.Controls.Add($labelNetworkIpRange)
	$formLabInABoxConfigurato.Controls.Add($labelSwitchName)
	$formLabInABoxConfigurato.Controls.Add($tb_NetworkIpRange)
	$formLabInABoxConfigurato.Controls.Add($tb_SwitchName)
	$formLabInABoxConfigurato.AutoScaleDimensions = '6, 13'
	$formLabInABoxConfigurato.AutoScaleMode = 'Font'
	$formLabInABoxConfigurato.ClientSize = '577, 615'
	$formLabInABoxConfigurato.MainMenuStrip = $menustrip1
	$formLabInABoxConfigurato.Margin = '4, 4, 4, 4'
	$formLabInABoxConfigurato.Name = 'formLabInABoxConfigurato'
	$formLabInABoxConfigurato.Text = 'Lab in a Box Configurator'
	$formLabInABoxConfigurato.add_Load($formLabInABoxConfigurato_Load)
	#
	# cb_AzureAutomation
	#
	$cb_AzureAutomation.Location = '352, 472'
	$cb_AzureAutomation.Name = 'cb_AzureAutomation'
	$cb_AzureAutomation.Size = '127, 24'
	$cb_AzureAutomation.TabIndex = 67
	$cb_AzureAutomation.Text = 'Azure Automation'
	$cb_AzureAutomation.UseVisualStyleBackColor = $True
	$cb_AzureAutomation.add_CheckedChanged($cb_AzureAutomation_CheckedChanged)
	#
	# labelOnlyOneNatSwitchCanE
	#
	$labelOnlyOneNatSwitchCanE.AutoSize = $True
	$labelOnlyOneNatSwitchCanE.Location = '249, 223'
	$labelOnlyOneNatSwitchCanE.Name = 'labelOnlyOneNatSwitchCanE'
	$labelOnlyOneNatSwitchCanE.Size = '157, 13'
	$labelOnlyOneNatSwitchCanE.TabIndex = 66
	$labelOnlyOneNatSwitchCanE.Text = '**Only one Nat Switch can exist'
	#
	# SwitchType
	#
	$SwitchType.AutoSize = $True
	$SwitchType.Location = '6, 223'
	$SwitchType.Name = 'SwitchType'
	$SwitchType.Size = '69, 13'
	$SwitchType.TabIndex = 65
	$SwitchType.Text = 'Switch Type:'
	#
	# cb_SwitchType
	#
	$cb_SwitchType.FormattingEnabled = $True
	$cb_SwitchType.Location = '143, 220'
	$cb_SwitchType.Name = 'cb_SwitchType'
	$cb_SwitchType.Size = '100, 21'
	$cb_SwitchType.TabIndex = 64
	$cb_SwitchType.add_SelectedIndexChanged($cb_SwitchType_SelectedIndexChanged)
	#
	# labelISOsWillBeMountedToD
	#
	$labelISOsWillBeMountedToD.AutoSize = $True
	$labelISOsWillBeMountedToD.Location = '143, 331'
	$labelISOsWillBeMountedToD.Name = 'labelISOsWillBeMountedToD'
	$labelISOsWillBeMountedToD.Size = '150, 13'
	$labelISOsWillBeMountedToD.TabIndex = 63
	$labelISOsWillBeMountedToD.Text = '**ISO''s will be mounted To DC'
	#
	# cb_DevMachine
	#
	$cb_DevMachine.Location = '6, 442'
	$cb_DevMachine.Name = 'cb_DevMachine'
	$cb_DevMachine.Size = '127, 24'
	$cb_DevMachine.TabIndex = 62
	$cb_DevMachine.Text = 'Developer Machine'
	$cb_DevMachine.UseVisualStyleBackColor = $True
	#
	# labelWindows2016ISO
	#
	$labelWindows2016ISO.AutoSize = $True
	$labelWindows2016ISO.Location = '6, 415'
	$labelWindows2016ISO.Name = 'labelWindows2016ISO'
	$labelWindows2016ISO.Size = '102, 13'
	$labelWindows2016ISO.TabIndex = 40
	$labelWindows2016ISO.Text = 'Windows 2016 ISO:'
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($fileToolStripMenuItem)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Size = '577, 24'
	$menustrip1.TabIndex = 60
	$menustrip1.Text = 'menustrip1'
	#
	# cb_Windows2016ISO
	#
	$cb_Windows2016ISO.FormattingEnabled = $True
	$cb_Windows2016ISO.Location = '143, 412'
	$cb_Windows2016ISO.Name = 'cb_Windows2016ISO'
	$cb_Windows2016ISO.Size = '400, 21'
	$cb_Windows2016ISO.TabIndex = 45
	$cb_Windows2016ISO.add_Validating($cb_Windows2016ISO_Validating)
	$cb_Windows2016ISO.add_Validated($cb_Windows2016ISO_Validated)
	#
	# buttonFinish
	#
	$buttonFinish.Location = '438, 573'
	$buttonFinish.Name = 'buttonFinish'
	$buttonFinish.Size = '75, 23'
	$buttonFinish.TabIndex = 57
	$buttonFinish.Text = 'Finish'
	$buttonFinish.UseVisualStyleBackColor = $True
	$buttonFinish.add_Click($buttonFinish_Click)
	#
	# labelServers
	#
	$labelServers.AutoSize = $True
	$labelServers.Location = '6, 302'
	$labelServers.Name = 'labelServers'
	$labelServers.Size = '46, 13'
	$labelServers.TabIndex = 17
	$labelServers.Text = 'Servers:'
	#
	# cb_ConfigtoApply
	#
	$cb_ConfigtoApply.Enabled = $False
	$cb_ConfigtoApply.FormattingEnabled = $True
	$cb_ConfigtoApply.Location = '143, 530'
	$cb_ConfigtoApply.Name = 'cb_ConfigtoApply'
	$cb_ConfigtoApply.Size = '175, 21'
	$cb_ConfigtoApply.TabIndex = 56
	$cb_ConfigtoApply.add_Validating($cb_ConfigtoApply_Validating)
	$cb_ConfigtoApply.add_Validated($cb_ConfigtoApply_Validated)
	#
	# labelParentDiskDrive
	#
	$labelParentDiskDrive.AutoSize = $True
	$labelParentDiskDrive.Location = '6, 61'
	$labelParentDiskDrive.Name = 'labelParentDiskDrive'
	$labelParentDiskDrive.Size = '93, 13'
	$labelParentDiskDrive.TabIndex = 0
	$labelParentDiskDrive.Text = 'Parent Disk Drive:'
	#
	# tb_SQLServerFeatures
	#
	$tb_SQLServerFeatures.Enabled = $False
	$tb_SQLServerFeatures.Location = '143, 504'
	$tb_SQLServerFeatures.Name = 'tb_SQLServerFeatures'
	$tb_SQLServerFeatures.Size = '175, 20'
	$tb_SQLServerFeatures.TabIndex = 50
	$tb_SQLServerFeatures.add_Validating($tb_SQLServerFeatures_Validating)
	$tb_SQLServerFeatures.add_Validated($tb_SQLServerFeatures_Validated)
	#
	# cb_ParentDiskDrive
	#
	$cb_ParentDiskDrive.FormattingEnabled = $True
	$cb_ParentDiskDrive.Location = '143, 58'
	$cb_ParentDiskDrive.Name = 'cb_ParentDiskDrive'
	$cb_ParentDiskDrive.Size = '37, 21'
	$cb_ParentDiskDrive.TabIndex = 2
	$cb_ParentDiskDrive.add_Validating($cb_ParentDiskDrive_Validating)
	$cb_ParentDiskDrive.add_Validated($cb_ParentDiskDrive_Validated)
	#
	# labelConfigToApply
	#
	$labelConfigToApply.AutoSize = $True
	$labelConfigToApply.Enabled = $False
	$labelConfigToApply.Location = '6, 533'
	$labelConfigToApply.Name = 'labelConfigToApply'
	$labelConfigToApply.Size = '81, 13'
	$labelConfigToApply.TabIndex = 18
	$labelConfigToApply.Text = 'Config to Apply:'
	#
	# cb_ResourceDiskDrive
	#
	$cb_ResourceDiskDrive.FormattingEnabled = $True
	$cb_ResourceDiskDrive.Location = '143, 34'
	$cb_ResourceDiskDrive.Name = 'cb_ResourceDiskDrive'
	$cb_ResourceDiskDrive.Size = '37, 21'
	$cb_ResourceDiskDrive.TabIndex = 1
	$cb_ResourceDiskDrive.add_SelectedIndexChanged($cb_ResourceDiskDrive_SelectedIndexChanged)
	$cb_ResourceDiskDrive.add_Validating($cb_ResourceDiskDrive_Validating)
	$cb_ResourceDiskDrive.add_Validated($cb_ResourceDiskDrive_Validated)
	#
	# labelResourceLocationDrive
	#
	$labelResourceLocationDrive.AutoSize = $True
	$labelResourceLocationDrive.Location = '6, 37'
	$labelResourceLocationDrive.Name = 'labelResourceLocationDrive'
	$labelResourceLocationDrive.Size = '108, 13'
	$labelResourceLocationDrive.TabIndex = 5
	$labelResourceLocationDrive.Text = 'Resource Disk Drive:'
	#
	# tb_ServerstoConfig
	#
	$tb_ServerstoConfig.Location = '143, 299'
	$tb_ServerstoConfig.Name = 'tb_ServerstoConfig'
	$tb_ServerstoConfig.Size = '238, 20'
	$tb_ServerstoConfig.TabIndex = 55
	$tb_ServerstoConfig.add_Validating($tb_ServerstoConfig_Validating)
	$tb_ServerstoConfig.add_Validated($tb_ServerstoConfig_Validated)
	#
	# cb_ChildDiskDrive
	#
	$cb_ChildDiskDrive.FormattingEnabled = $True
	$cb_ChildDiskDrive.Location = '143, 84'
	$cb_ChildDiskDrive.Name = 'cb_ChildDiskDrive'
	$cb_ChildDiskDrive.Size = '37, 21'
	$cb_ChildDiskDrive.TabIndex = 6
	$cb_ChildDiskDrive.add_Validating($cb_ChildDiskDrive_Validating)
	$cb_ChildDiskDrive.add_Validated($cb_ChildDiskDrive_Validated)
	#
	# lb_ChildDiskDrive
	#
	$lb_ChildDiskDrive.AutoSize = $True
	$lb_ChildDiskDrive.Location = '6, 87'
	$lb_ChildDiskDrive.Name = 'lb_ChildDiskDrive'
	$lb_ChildDiskDrive.Size = '85, 13'
	$lb_ChildDiskDrive.TabIndex = 7
	$lb_ChildDiskDrive.Text = 'Child Disk Drive:'
	#
	# labelSQLServerFeatures
	#
	$labelSQLServerFeatures.AutoSize = $True
	$labelSQLServerFeatures.Enabled = $False
	$labelSQLServerFeatures.Location = '6, 507'
	$labelSQLServerFeatures.Name = 'labelSQLServerFeatures'
	$labelSQLServerFeatures.Size = '109, 13'
	$labelSQLServerFeatures.TabIndex = 37
	$labelSQLServerFeatures.Text = 'SQL Server Features:'
	#
	# tb_LabMachinePrefix
	#
	$tb_LabMachinePrefix.Location = '143, 111'
	$tb_LabMachinePrefix.Name = 'tb_LabMachinePrefix'
	$tb_LabMachinePrefix.Size = '95, 20'
	$tb_LabMachinePrefix.TabIndex = 8
	$tb_LabMachinePrefix.add_Validating($tb_LabMachinePrefix_Validating)
	$tb_LabMachinePrefix.add_Validated($tb_LabMachinePrefix_Validated)
	#
	# cb_SQLServerISO
	#
	$cb_SQLServerISO.FormattingEnabled = $True
	$cb_SQLServerISO.Location = '143, 384'
	$cb_SQLServerISO.Name = 'cb_SQLServerISO'
	$cb_SQLServerISO.Size = '400, 21'
	$cb_SQLServerISO.TabIndex = 40
	$cb_SQLServerISO.add_Validating($cb_SQLServerISO_Validating)
	$cb_SQLServerISO.add_Validated($cb_SQLServerISO_Validated)
	#
	# lb_DCMachineName
	#
	$lb_DCMachineName.AutoSize = $True
	$lb_DCMachineName.Location = '6, 113'
	$lb_DCMachineName.Name = 'lb_DCMachineName'
	$lb_DCMachineName.Size = '101, 13'
	$lb_DCMachineName.TabIndex = 9
	$lb_DCMachineName.Text = 'Lab Machine Prefix:'
	#
	# cb_DSCCentralHub
	#
	$cb_DSCCentralHub.Location = '6, 472'
	$cb_DSCCentralHub.Name = 'cb_DSCCentralHub'
	$cb_DSCCentralHub.Size = '99, 24'
	$cb_DSCCentralHub.TabIndex = 16
	$cb_DSCCentralHub.Text = 'DSC Central'
	$cb_DSCCentralHub.UseVisualStyleBackColor = $True
	$cb_DSCCentralHub.add_CheckedChanged($cb_DSCCentralHub_CheckedChanged)
	#
	# labelLocalAdminPass
	#
	$labelLocalAdminPass.AutoSize = $True
	$labelLocalAdminPass.Location = '6, 142'
	$labelLocalAdminPass.Name = 'labelLocalAdminPass'
	$labelLocalAdminPass.Size = '94, 13'
	$labelLocalAdminPass.TabIndex = 20
	$labelLocalAdminPass.Text = 'Local Admin Pass:'
	#
	# cb_SSMSISO
	#
	$cb_SSMSISO.FormattingEnabled = $True
	$cb_SSMSISO.Location = '143, 356'
	$cb_SSMSISO.Name = 'cb_SSMSISO'
	$cb_SSMSISO.Size = '400, 21'
	$cb_SSMSISO.TabIndex = 39
	$cb_SSMSISO.add_Validating($cb_SSMSISO_Validating)
	$cb_SSMSISO.add_Validated($cb_SSMSISO_Validated)
	#
	# tb_LocalAdminPass
	#
	$tb_LocalAdminPass.Location = '143, 139'
	$tb_LocalAdminPass.Name = 'tb_LocalAdminPass'
	$tb_LocalAdminPass.Size = '100, 20'
	$tb_LocalAdminPass.TabIndex = 10
	$tb_LocalAdminPass.add_Validating($tb_LocalAdminPass_Validating)
	$tb_LocalAdminPass.add_Validated($tb_LocalAdminPass_Validated)
	#
	# labelDomainAdminPass
	#
	$labelDomainAdminPass.AutoSize = $True
	$labelDomainAdminPass.Location = '6, 169'
	$labelDomainAdminPass.Name = 'labelDomainAdminPass'
	$labelDomainAdminPass.Size = '104, 13'
	$labelDomainAdminPass.TabIndex = 22
	$labelDomainAdminPass.Text = 'Domain Admin Pass:'
	#
	# tb_DomainAdminPass
	#
	$tb_DomainAdminPass.Location = '143, 166'
	$tb_DomainAdminPass.Name = 'tb_DomainAdminPass'
	$tb_DomainAdminPass.Size = '100, 20'
	$tb_DomainAdminPass.TabIndex = 11
	$tb_DomainAdminPass.add_Validating($tb_DomainAdminPass_Validating)
	$tb_DomainAdminPass.add_Validated($tb_DomainAdminPass_Validated)
	#
	# labelSQLServerISO
	#
	$labelSQLServerISO.AutoSize = $True
	$labelSQLServerISO.Location = '6, 386'
	$labelSQLServerISO.Name = 'labelSQLServerISO'
	$labelSQLServerISO.Size = '86, 13'
	$labelSQLServerISO.TabIndex = 32
	$labelSQLServerISO.Text = 'SQL Server ISO:'
	#
	# labelSysPrepDriveName
	#
	$labelSysPrepDriveName.AutoSize = $True
	$labelSysPrepDriveName.Location = '6, 195'
	$labelSysPrepDriveName.Name = 'labelSysPrepDriveName'
	$labelSysPrepDriveName.Size = '105, 13'
	$labelSysPrepDriveName.TabIndex = 24
	$labelSysPrepDriveName.Text = 'SysPrep DriveName:'
	#
	# labelSSMSISO
	#
	$labelSSMSISO.AutoSize = $True
	$labelSSMSISO.Location = '6, 359'
	$labelSSMSISO.Name = 'labelSSMSISO'
	$labelSSMSISO.Size = '61, 13'
	$labelSSMSISO.TabIndex = 30
	$labelSSMSISO.Text = 'SSMS ISO:'
	#
	# tb_SysPrepDriveName
	#
	$tb_SysPrepDriveName.Location = '143, 193'
	$tb_SysPrepDriveName.Name = 'tb_SysPrepDriveName'
	$tb_SysPrepDriveName.Size = '238, 20'
	$tb_SysPrepDriveName.TabIndex = 12
	$tb_SysPrepDriveName.add_Validating($tb_SysPrepDriveName_Validating)
	$tb_SysPrepDriveName.add_Validated($tb_SysPrepDriveName_Validated)
	#
	# labelNetworkIpRange
	#
	$labelNetworkIpRange.AutoSize = $True
	$labelNetworkIpRange.Location = '6, 276'
	$labelNetworkIpRange.Name = 'labelNetworkIpRange'
	$labelNetworkIpRange.Size = '97, 13'
	$labelNetworkIpRange.TabIndex = 29
	$labelNetworkIpRange.Text = 'Network Ip Range:'
	#
	# labelSwitchName
	#
	$labelSwitchName.AutoSize = $True
	$labelSwitchName.Location = '6, 250'
	$labelSwitchName.Name = 'labelSwitchName'
	$labelSwitchName.Size = '73, 13'
	$labelSwitchName.TabIndex = 26
	$labelSwitchName.Text = 'Switch Name:'
	#
	# tb_NetworkIpRange
	#
	$tb_NetworkIpRange.Enabled = $False
	$tb_NetworkIpRange.Location = '143, 273'
	$tb_NetworkIpRange.Name = 'tb_NetworkIpRange'
	$tb_NetworkIpRange.Size = '100, 20'
	$tb_NetworkIpRange.TabIndex = 14
	$tb_NetworkIpRange.add_Validating($tb_NetworkIpRange_Validating)
	$tb_NetworkIpRange.add_Validated($tb_NetworkIpRange_Validated)
	#
	# tb_SwitchName
	#
	$tb_SwitchName.Enabled = $False
	$tb_SwitchName.Location = '143, 247'
	$tb_SwitchName.Name = 'tb_SwitchName'
	$tb_SwitchName.Size = '100, 20'
	$tb_SwitchName.TabIndex = 13
	$tb_SwitchName.add_Validating($tb_SwitchName_Validating)
	$tb_SwitchName.add_Validated($tb_SwitchName_Validated)
	#
	# fileToolStripMenuItem
	#
	[void]$fileToolStripMenuItem.DropDownItems.Add($openToolStripMenuItem)
	[void]$fileToolStripMenuItem.DropDownItems.Add($exitToolStripMenuItem)
	$fileToolStripMenuItem.Name = 'fileToolStripMenuItem'
	$fileToolStripMenuItem.Size = '37, 20'
	$fileToolStripMenuItem.Text = 'File'
	#
	# openToolStripMenuItem
	#
	$openToolStripMenuItem.Name = 'openToolStripMenuItem'
	$openToolStripMenuItem.Size = '103, 22'
	$openToolStripMenuItem.Text = 'Open'
	$openToolStripMenuItem.add_Click($openToolStripMenuItem_Click)
	#
	# exitToolStripMenuItem
	#
	$exitToolStripMenuItem.Name = 'exitToolStripMenuItem'
	$exitToolStripMenuItem.Size = '152, 22'
	$exitToolStripMenuItem.Text = 'Exit'
	$exitToolStripMenuItem.add_Click($exitToolStripMenuItem_Click)
	#
	# openfiledialog
	#
	$openfiledialog.FileName = 'openfiledialog1'
	$openfiledialog.Filter = 'json files(*.json)|*.json'
	$openfiledialog.Multiselect = $True
	#
	# errorprovider1
	#
	$errorprovider1.ContainerControl = $formLabInABoxConfigurato
	$menustrip1.ResumeLayout()
	$formLabInABoxConfigurato.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formLabInABoxConfigurato.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formLabInABoxConfigurato.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formLabInABoxConfigurato.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formLabInABoxConfigurato.ShowDialog()

} #End Function

#Call the form
Show-LIABForm_psf | Out-Null
